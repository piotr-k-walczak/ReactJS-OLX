import { Index } from './index';
import * as Types from './types';
import HttpRequests from './http-requests';
export declare class MeiliSearch implements Types.MeiliSearchInterface {
    config: Types.Config;
    httpRequest: HttpRequests;
    constructor(config: Types.Config);
    /**
     * Return an Index instance
     * @memberof MeiliSearch
     * @method index
     */
    index<T = any>(indexUid: string): Index<T>;
    /**
     * Gather information about an index by calling MeiliSearch and
     * return an Index instance with the gathered information
     * @memberof MeiliSearch
     * @method getIndex
     */
    getIndex<T = any>(indexUid: string): Promise<Index<T>>;
    /**
     * Get an index or create it if it does not exist
     * @memberof MeiliSearch
     * @method getOrCreateIndex
     */
    getOrCreateIndex<T = any>(uid: string, options?: Types.IndexOptions): Promise<Index<T>>;
    /**
     * List all indexes in the database
     * @memberof MeiliSearch
     * @method listIndexes
     */
    listIndexes(): Promise<Types.IndexResponse[]>;
    /**
     * Create a new index
     * @memberof MeiliSearch
     * @method createIndex
     */
    createIndex<T = any>(uid: string, options?: Types.IndexOptions): Promise<Index<T>>;
    /**
     * Update an index
     * @memberof MeiliSearch
     * @method updateIndex
     */
    updateIndex<T = any>(uid: string, options?: Types.IndexOptions): Promise<Index<T>>;
    /**
     * Delete an index
     * @memberof MeiliSearch
     * @method deleteIndex
     */
    deleteIndex(uid: string): Promise<void>;
    /**
     * Deletes an index if it already exists.
     * @memberof MeiliSearch
     * @method deleteIndexIfExists
     */
    deleteIndexIfExists(uid: string): Promise<boolean>;
    /**
     * Get private and public key
     * @memberof MeiliSearch
     * @method getKey
     */
    getKeys(): Promise<Types.Keys>;
    /**
     * Checks if the server is healthy, otherwise an error will be thrown.
     *
     * @memberof MeiliSearch
     * @method health
     */
    health(): Promise<Types.Health>;
    /**
     * Checks if the server is healthy, return true or false.
     *
     * @memberof MeiliSearch
     * @method isHealthy
     */
    isHealthy(): Promise<boolean>;
    /**
     * Get the stats of all the database
     * @memberof MeiliSearch
     * @method stats
     */
    stats(): Promise<Types.Stats>;
    /**
     * Get the version of MeiliSearch
     * @memberof MeiliSearch
     * @method version
     */
    version(): Promise<Types.Version>;
    /**
     * Triggers a dump creation process
     * @memberof MeiliSearch
     * @method createDump
     */
    createDump(): Promise<Types.EnqueuedDump>;
    /**
     * Get the status of a dump creation process
     * @memberof MeiliSearch
     * @method getDumpStatus
     */
    getDumpStatus(dumpUid: string): Promise<Types.EnqueuedDump>;
}
//# sourceMappingURL=meilisearch.d.ts.map