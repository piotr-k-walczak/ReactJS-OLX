import 'cross-fetch/polyfill';
import * as Types from './types';
declare class HttpRequests {
    headers: {};
    url: URL;
    constructor(config: Types.Config);
    static addTrailingSlash(url: string): string;
    request({ method, url, params, body, config, }: {
        method: string;
        url: string;
        params?: {
            [key: string]: any;
        };
        body?: any;
        config?: Partial<Request>;
    }): Promise<any>;
    get(url: string, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<void>;
    get<T = any>(url: string, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<T>;
    post(url: string, data: Types.IndexRequest, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<Types.IndexResponse>;
    post<T = any, R = Types.EnqueuedUpdate>(url: string, data?: T, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<R>;
    put(url: string, data: Types.IndexOptions | Types.IndexRequest, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<Types.IndexResponse>;
    put<T = any, R = Types.EnqueuedUpdate>(url: string, data?: T, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<R>;
    delete(url: string, data?: any, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<void>;
    delete<T>(url: string, data?: any, params?: {
        [key: string]: any;
    }, config?: Partial<Request>): Promise<T>;
}
export default HttpRequests;
//# sourceMappingURL=http-requests.d.ts.map